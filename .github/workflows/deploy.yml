name: Deploy Digipin Backend

#Get-Content C:\Users\rohit\.ssh\id_rsa
#sudo certbot --nginx -d digipinlocator.site 

on:
  push:
    branches: [ main ]  # Change to your default branch if different

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          cat > .env << EOL
          CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          PORT=${{ secrets.PORT }}
          EOL

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DIGITALOCEAN_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DIGITALOCEAN_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean
        run: |
          # Compress backend files for faster transfer
          tar -czf ../digipin-backend.tar.gz .

          # Upload to server
          scp ../digipin-backend.tar.gz ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_HOST }}:/tmp/

          # Deploy
          ssh ${{ secrets.DIGITALOCEAN_USER }}@${{ secrets.DIGITALOCEAN_HOST }} "
            # Create deployment directory
            mkdir -p /tmp/digipin-backend-deploy

            # Extract files
            tar -xzf /tmp/digipin-backend.tar.gz -C /tmp/digipin-backend-deploy

            # Ensure target directory exists
            sudo mkdir -p /var/www/digipin-backend

            # Clear previous deployment
            sudo rm -rf /var/www/digipin-backend/*

            # Copy new files
            sudo cp -r /tmp/digipin-backend-deploy/* /var/www/digipin-backend/

            # Always use the new .env file from the deployment package
            sudo cp /tmp/digipin-backend-deploy/.env /var/www/digipin-backend/.env

            # Set proper permissions
            sudo chmod 600 /var/www/digipin-backend/.env

            # Change to application directory
            cd /var/www/digipin-backend

            # Install production dependencies
            npm ci --production

            # Stop existing application instance
            pm2 stop digipin-backend-service || true
            pm2 delete digipin-backend-service || true

            # Start new application instance with correct entry point
            pm2 start server.js --name digipin-backend-service

            # Save PM2 configuration to survive reboots
            pm2 save

            # Clean up
            rm -rf /tmp/digipin-backend-deploy
            rm /tmp/digipin-backend.tar.gz
          "
      - name: Deployment status
        run: echo "Deployment completed successfully!"



